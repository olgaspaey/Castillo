# -*- coding: utf-8 -*-
# ---------------------------------------------------------------------------
# Script_Général_1.py
# Created on: 2024-07-04 15:22:00.00000
#   (generated by ArcGIS/ModelBuilder)
# Usage: Script_Général_1 1.0 (® O. Spaey & I. Intxaurbe)
# Description: We need the following files (With the name that we indicate): 
# CeilingsMax.wrl (the entire 3D of the cave, modified to show its paleo-state), 
# CeilingsMin.wrl (3D of the "internal ceilings" in the cave, the obstacles between 
# the ground and the highest Z), GroundOK.wrl (the ground level, presumably utilised 
# by the societies in the past), Allin.shp (a point type file of the analysed negative hands)
# Access.shp (the entrance used in the past) and Depths.shp (the deepest part of the cave).
# All the files must be put in a folder named as "Paleospeleology" in the "C:/" folder.
# ---------------------------------------------------------------------------

# Import arcpy module
import arcpy
from arcpy import env
from arcpy.sa import *
arcpy.CheckOutExtension("3D")
env.workspace = "C:/Paleospeleology"
arcpy.env.overwriteOutput = True

# Local variables:
GroundOK_wrl = "GroundOK.wrl"
GroundOK_shp = "GroundOK.shp"
GroundOK_tif = "GroundOK.tif"
GroundOK25_tif = "GroundOK25.tif"
CeilingsMax_wrl = "CeilingsMax.wrl"
CeilingsMax_shp = "CeilingsMax.shp"
CeilingsMax_tif = "CeilingsMax.tif"
CeilingsMin_wrl = "CeilingsMin.wrl"
CeilingsMin_shp = "CeilingsMin.shp"
CeilingsMin_tif = "CeilingsMin.tif"
CeilingsOK_tif = "CeilingsOK.tif"
Slope_tif = "Slope.tif"
Height_tif = "Height.tif"
P1_tif = "P1.tif"
P2P3_tif = "P2P3.tif"
OPosture_tif = "OPosture.tif"
OPosition_tif = "OPosition.tif"
OP_shp = "OP.shp"
Target_shp = "Target.shp"
Allin_shp = "Allin.shp"
LSInterv_shp = "LSInterv.shp"
LSInLight_shp = "LSInLight.shp"
LSInLight2_shp = "LSInLight2.shp"
Intervisibility_shp = "Intervisibility.shp"
IntervStatistics_dbf = "IntervStatistics.dbf"
Buffer_shp = "Buffer.shp"
OPs_shp = "OPs.shp"
Id_tif = "Id.tif"
OPId_tif = "OPId.tif"
OPId_shp = "OPId.shp"
OPsId_shp = "OPsId.shp"
LSIdeale_shp = "LSIdeale.shp"
LSIdLig_shp = "LSIdLig.shp"
LSIdSel_shp = "LSIdSel.shp"
IdealStatistics_dbf = "IdealStatistics.dbf"
IdealPosition_tif = "IdealPosition.tif"
IdealTarStatistics_dbf = "IdealTarStatistics.dbf"
IdealHands_tif = "IdealHands.tif"
LS_shp = "LS.shp"
LSLight_shp = "LSLight.shp"
LSSelect_shp = "LSSelect.shp"
ObserverStatistics_dbf = "ObserverStatistics.dbf"
ObserverFrequency_tif = "ObserverFrequency.tif"
TargetStatistics_dbf = "TargetStatistics.dbf"
TargetFrequency_tif = "TargetFrequency.tif"
LyingDown_tif = "LyingDown.tif"
Standing_tif = "Standing.tif"
Stooping_tif = "Stooping.tif"
VisibilityRange_tif = "VisibilityRange.tif"
VisibilityLyingDown_tif = "VisibilityLyingDown.tif"
VisibilityStooping_tif = "VisibilityStooping.tif"
VisibilityStanding_tif = "VisibilityStanding.tif"
Access_shp = "Access.shp"
Depths_shp = "Depths.shp", 
MainCorridor_tif = "MainCorridor.tif"
MainCorridor_shp = "MainCorridor.shp"
EstimatedPositionArtist_shp = "EstimatedPositionArtist.shp"
CostOK_tif = "CostOK.tif"
CostWalking_tif = "CostWalking.tif"
CostClimbing_tif = "CostClimbing.tif"
CostClimbingOK_tif = "CostClimbingOK.tif"
Dangerousness_tif = "Dangerousness.tif"
CostClimbing_shp = "CostClimbing.shp"
Buffer2_shp = "Buffer2.shp"
Dangerousness_shp = "Dangerousness.shp"
Cost_tif = "Cost.tif"
CostBack_shp = "CostBack.shp"
LCP_tif = "LCP.tif"
CostDistance_tif = "CostDistance.tif"
CostBack_tif = "CostBack.tif"
LCP_shp = "LCP.shp"
Buffer3_shp = "Buffer3.shp"
VisibleMainCorridor_shp = "VisibleMainCorridor.shp"
LSMainCor_shp = "LSMainCor.shp"
LSMCLig_shp = "LSMCLig.shp"
LSMCSel_shp = "LSMCSel.shp"
MCStatistics_dbf = "MCStatistics.dbf"
VisibleMainCorridor_tif = "VisibleMainCorridor.tif"
MCTarStatistics_dbf = "MCTarStatistics.dbf"
MCVisibHands_tif = "MCVisibHands.tif"
VisibleMainCorridor_tif = "VisibleMainCorridor.tif"
Buffer4_shp = "Buffer4.shp"
VisibleLCP_shp = "VisibleLCP.shp"
LSLCP_shp = "LSLCP.shp"
LSLCPLig_shp = "LSLCPLig.shp"
LSLCPSel_shp = "LSLCPSel.shp"
LCPStatistics_dbf = "LCPStatistics.dbf"
VisibleLCP_tif = "VisibleLCP.tif"
LCPVisibHands_tif = "LCPVisibHands.tif"
CostLCP_tif = "CostLCP.tif"
CostLCP_shp = "CostLCP.shp"
GreaterDifficulties_tif = "GreaterDifficulties.tif"
HeatMapDensity_tif = "HeatMapDensity.tif"

# Execute CreateFolder
arcpy.CreateFolder_management("C:/Paleospeleology", "Topography")

#   for standard output
arcpy.env.workspace = "C:/Paleospeleology/Topography"

# Process: Import 3D Files
arcpy.Import3DFiles_3d(GroundOK_wrl, GroundOK_shp, "ONE_ROOT_ONE_FEATURE", "PROJCS['ETRS_1989_ETRS-TM30',GEOGCS['GCS_ETRS_1989',DATUM['D_ETRS_1989',SPHEROID['GRS_1980',6378137.0,298.257222101]],PRIMEM['Greenwich',0.0],UNIT['Degree',0.0174532925199433]],PROJECTION['Transverse_Mercator'],PARAMETER['False_Easting',500000.0],PARAMETER['False_Northing',0.0],PARAMETER['Central_Meridian',-3.0],PARAMETER['Scale_Factor',0.9996],PARAMETER['Latitude_Of_Origin',0.0],UNIT['Meter',1.0]];-5120900 -9998100 10000;-100000 10000;-100000 10000;0,001;0,001;0,001;IsHighPrecision", "Z_IS_UP", "*", "", "")

# Process: Multipatch to Raster
arcpy.MultipatchToRaster_conversion(GroundOK_shp, GroundOK_tif, "0,05")

# Process: Multipatch to Raster
arcpy.MultipatchToRaster_conversion(GroundOK_shp, GroundOK25_tif, "0,25")

# Process: Import 3D Files
arcpy.Import3DFiles_3d(CeilingsMax_wrl, CeilingsMax_shp, "ONE_ROOT_ONE_FEATURE", "PROJCS['ETRS_1989_ETRS-TM30',GEOGCS['GCS_ETRS_1989',DATUM['D_ETRS_1989',SPHEROID['GRS_1980',6378137.0,298.257222101]],PRIMEM['Greenwich',0.0],UNIT['Degree',0.0174532925199433]],PROJECTION['Transverse_Mercator'],PARAMETER['False_Easting',500000.0],PARAMETER['False_Northing',0.0],PARAMETER['Central_Meridian',-3.0],PARAMETER['Scale_Factor',0.9996],PARAMETER['Latitude_Of_Origin',0.0],UNIT['Meter',1.0]];-5120900 -9998100 10000;-100000 10000;-100000 10000;0,001;0,001;0,001;IsHighPrecision", "Z_IS_UP", "*", "", "")

# Process: Multipatch to Raster
arcpy.MultipatchToRaster_conversion(CeilingsMax_shp, CeilingsMax_tif, "0,05")

# Process: Import 3D Files
arcpy.Import3DFiles_3d(CeilingsMin_wrl, CeilingsMin_shp, "ONE_ROOT_ONE_FEATURE", "PROJCS['ETRS_1989_ETRS-TM30',GEOGCS['GCS_ETRS_1989',DATUM['D_ETRS_1989',SPHEROID['GRS_1980',6378137.0,298.257222101]],PRIMEM['Greenwich',0.0],UNIT['Degree',0.0174532925199433]],PROJECTION['Transverse_Mercator'],PARAMETER['False_Easting',500000.0],PARAMETER['False_Northing',0.0],PARAMETER['Central_Meridian',-3.0],PARAMETER['Scale_Factor',0.9996],PARAMETER['Latitude_Of_Origin',0.0],UNIT['Meter',1.0]];-5120900 -9998100 10000;-100000 10000;-100000 10000;0,001;0,001;0,001;IsHighPrecision", "Z_IS_UP", "*", "", "")

# Process: Multipatch to Raster
arcpy.MultipatchToRaster_conversion(CeilingsMin_shp, CeilingsMin_tif, "0,05")

# Process: Mosaic To New Raster
arcpy.MosaicToNewRaster_management("CeilingsMax.tif;CeilingsMin.tif", "C:\\Paleospeleology\Topography", \
                                   "CeilingsOK.tif", "PROJCS['ETRS_1989_ETRS-TM30',GEOGCS['GCS_ETRS_1989',DATUM['D_ETRS_1989',SPHEROID['GRS_1980',6378137.0,298.257222101]],PRIMEM['Greenwich',0.0],UNIT['Degree',0.0174532925199433]],PROJECTION['Transverse_Mercator'],PARAMETER['False_Easting',500000.0],PARAMETER['False_Northing',0.0],PARAMETER['Central_Meridian',-3.0],PARAMETER['Scale_Factor',0.9996],PARAMETER['Latitude_Of_Origin',0.0],UNIT['Meter',1.0]]",\
                                   "32_BIT_FLOAT", "0,05", "1", "MINIMUM","REJECT")

# Process: Slope
arcpy.gp.Slope_sa(GroundOK_tif, Slope_tif, "DEGREE", "1")

# Process: Raster Calculator
Height = (Raster(CeilingsOK_tif) - Raster(GroundOK_tif))
Height.save(Height_tif)

# Execute CreateFolder
arcpy.CreateFolder_management("C:/Paleospeleology", "Intervisibility")

#   for standard output
arcpy.env.workspace = "C:/Paleospeleology/Intervisibility"

# Process: Construct Sight Lines
arcpy.ConstructSightLines_3d("C:/Paleospeleology/Allin.shp", "C:/Paleospeleology/Allin.shp", LSInterv_shp, "Shape.Z", "Shape.Z", "<None>", "1", "NOT_OUTPUT_THE_DIRECTION")

# Process: Intervisibility
arcpy.Intervisibility_3d(LSInterv_shp, "C:/Paleospeleology/Topography/CeilingsMax.shp", "VISIBLE")

# Process: Add Geometry
arcpy.AddGeometryAttributes_management(LSInterv_shp, "LENGTH_3D", "METERS", "", "PROJCS['ETRS_1989_ETRS-TM30',GEOGCS['GCS_ETRS_1989',DATUM['D_ETRS_1989',SPHEROID['GRS_1980',6378137.0,298.257222101]],PRIMEM['Greenwich',0.0],UNIT['Degree',0.0174532925199433]],PROJECTION['Transverse_Mercator'],PARAMETER['False_Easting',500000.0],PARAMETER['False_Northing',0.0],PARAMETER['Central_Meridian',-3.0],PARAMETER['Scale_Factor',0.9996],PARAMETER['Latitude_Of_Origin',0.0],UNIT['Meter',1.0]]")

# Process: Select
arcpy.Select_analysis(LSInterv_shp, LSInLight_shp, "\"LENGTH_3D\" <= 2.99")

# Process: Select
arcpy.Select_analysis(LSInLight_shp, LSInLight2_shp, "\"LENGTH_3D\" > 0")

# Process: Select 
arcpy.Select_analysis(LSInLight2_shp, Intervisibility_shp, "\"VISIBLE\" = 1")

# Process: Summary Statistics
arcpy.Statistics_analysis(Intervisibility_shp, IntervStatistics_dbf, "OID_OBSERV COUNT", "OID_OBSERV")

# Process: Add Field 
arcpy.AddField_management(IntervStatistics_dbf, "Hand", "DOUBLE", 100, 10, 10, "", "NON_NULLABLE", "NON_REQUIRED")

## input file
file = IntervStatistics_dbf

field_to_take = 'OID_OBSERV' ### field with values
field_to_update = 'Hand' ### Field to be updated

values = []
# Process: CalculateMax
with arcpy.da.SearchCursor(file, field_to_take) as cursor, arcpy.da.UpdateCursor(file, [field_to_take, field_to_update]) as upd_cursor:
    for row in cursor:
        values.append(row[0])
    for row in upd_cursor:
        value = (float(row[0]) + 1)

        row[1] = float(value) ### calculate value
        upd_cursor.updateRow(row) ### set value

# Process: Join Field
arcpy.JoinField_management("C:/Paleospeleology/Allin.shp", "FID", IntervStatistics_dbf, "OID_OBSERV", "COUNT_OID_")

# Process: Add Field
arcpy.AddField_management("C:/Paleospeleology/Allin.shp", "Interv", "DOUBLE", 100, 10, 10, "", "NON_NULLABLE", "NON_REQUIRED")

#   for standard output
arcpy.env.workspace = "C:/Paleospeleology"

## input file
file = Allin_shp

field_to_max = 'COUNT_OID_' ### field with values
field_to_update = 'Interv' ### Field to be updated

values = []
# Process: Max
with arcpy.da.SearchCursor(file, field_to_max) as cursor, arcpy.da.UpdateCursor(file, [field_to_max, field_to_update]) as upd_cursor:
    for row in cursor:
        values.append(row[0])
    max_num = max(values) ### get max value
    for row in upd_cursor:
        value = (float(row[0]) / float(max_num)) * 100

        row[1] = float(value) ### calculate value
        upd_cursor.updateRow(row) ### set value

#   for standard output
arcpy.env.workspace = "C:/Paleospeleology/Intervisibility"

# Process: Add Field 
arcpy.AddField_management(Intervisibility_shp, "Hand_1", "DOUBLE", 100, 10, 10, "", "NON_NULLABLE", "NON_REQUIRED")

## input file
file = Intervisibility_shp

field_to_take = 'OID_OBSERV' ### field with values
field_to_update = 'Hand_1' ### Field to be updated

values = []
# Process: CalculateMax
with arcpy.da.SearchCursor(file, field_to_take) as cursor, arcpy.da.UpdateCursor(file, [field_to_take, field_to_update]) as upd_cursor:
    for row in cursor:
        values.append(row[0])
    for row in upd_cursor:
        value = (float(row[0]) + 1)

        row[1] = float(value) ### calculate value
        upd_cursor.updateRow(row) ### set value

# Process: Add Field 
arcpy.AddField_management(Intervisibility_shp, "Hand_2", "DOUBLE", 100, 10, 10, "", "NON_NULLABLE", "NON_REQUIRED")

## input file
file = Intervisibility_shp

field_to_take = 'OID_TARGET' ### field with values
field_to_update = 'Hand_2' ### Field to be updated

values = []
# Process: CalculateMax
with arcpy.da.SearchCursor(file, field_to_take) as cursor, arcpy.da.UpdateCursor(file, [field_to_take, field_to_update]) as upd_cursor:
    for row in cursor:
        values.append(row[0])
    for row in upd_cursor:
        value = (float(row[0]) + 1)

        row[1] = float(value) ### calculate value
        upd_cursor.updateRow(row) ### set value

# Execute CreateFolder
arcpy.CreateFolder_management("C:/Paleospeleology", "Metadata")

#   for standard output
arcpy.env.workspace = "C:/Paleospeleology/Metadata"

# Process: Raster Calculator
Aa_tif = SetNull("C:/Paleospeleology/Topography/Height.tif", "C:/Paleospeleology/Topography/Height.tif", "VALUE < 0,24")

# Process: Raster Calculator
Ba_tif = SetNull("C:/Paleospeleology/Topography/Slope.tif", Aa_tif, "VALUE >= 30")

# Process: Raster Calculator
Aaa_tif = SetNull(Ba_tif, "0,24", "VALUE >= 0,71")
Aaa_tif.save(P1_tif)

# Process: Raster Calculator
A_tif = SetNull("C:/Paleospeleology/Topography/Height.tif", "C:/Paleospeleology/Topography/Height.tif", "VALUE < 0,71")

# Process: Raster Calculator
B_tif = SetNull("C:/Paleospeleology/Topography/Slope.tif", A_tif, "VALUE >= 30")

# Process: Raster Calculator
D_tif = Con(B_tif, "1,599", B_tif, "VALUE >= 1,599")

# Process: Raster Calculator (5)
E_tif = Con(D_tif, "0,71", D_tif, "VALUE < 1,599")
E_tif.save(P2P3_tif)

# Process: Mosaic To New Raster
arcpy.MosaicToNewRaster_management("P1.tif;P2P3.tif", "C:\\Paleospeleology\Metadata", \
                                   "OPosture.tif", "PROJCS['ETRS_1989_ETRS-TM30',GEOGCS['GCS_ETRS_1989',DATUM['D_ETRS_1989',SPHEROID['GRS_1980',6378137.0,298.257222101]],PRIMEM['Greenwich',0.0],UNIT['Degree',0.0174532925199433]],PROJECTION['Transverse_Mercator'],PARAMETER['False_Easting',500000.0],PARAMETER['False_Northing',0.0],PARAMETER['Central_Meridian',-3.0],PARAMETER['Scale_Factor',0.9996],PARAMETER['Latitude_Of_Origin',0.0],UNIT['Meter',1.0]]",\
                                   "32_BIT_FLOAT", "0,05", "1", "SUM","REJECT")

# Process: Raster Calculator
F_tif = (Raster("C:/Paleospeleology/Topography/GroundOK25.tif")+Raster(OPosture_tif))
F_tif.save(OPosition_tif)

# Process: Raster to Point 
arcpy.RasterToPoint_conversion(F_tif, OP_shp, "VALUE")

# Process: Buffer analysis
arcpy.Buffer_analysis("C:/Paleospeleology/Allin.shp", Buffer_shp, "2,99 Meters", "FULL", "ROUND", "NONE", "", "PLANAR")

# Process: Clip analysis
arcpy.Clip_analysis(OP_shp, Buffer_shp, OPs_shp)

# Execute CreateFolder
arcpy.CreateFolder_management("C:/Paleospeleology", "Position_Ideale")

#   for standard output
arcpy.env.workspace = "C:/Paleospeleology/Position_Ideale"

# Process: Raster Calculator
Id_tif = (Raster("C:/Paleospeleology/Topography/GroundOK25.tif")+Raster("C:/Paleospeleology/Metadata/OPosture.tif"))
Id_tif.save(OPId_tif)

# Process: Raster to Point 
arcpy.RasterToPoint_conversion(OPId_tif, OPId_shp, "VALUE")

# Process: Clip analysis
arcpy.Clip_analysis(OPId_shp, "C:/Paleospeleology/Metadata/Buffer.shp", OPsId_shp)

# Process: Construct Sight Lines
arcpy.ConstructSightLines_3d(OPsId_shp, "C:/Paleospeleology/Allin.shp", LSIdeale_shp, "grid_code", "Shape.Z", "<None>", "1", "NOT_OUTPUT_THE_DIRECTION")

# Process: Intervisibility
arcpy.Intervisibility_3d(LSIdeale_shp, "C:/Paleospeleology/Topography/CeilingsMax.shp", "VISIBLE")

# Process: Add Geometry
arcpy.AddGeometryAttributes_management(LSIdeale_shp, "LENGTH_3D", "METERS", "", "PROJCS['ETRS_1989_ETRS-TM30',GEOGCS['GCS_ETRS_1989',DATUM['D_ETRS_1989',SPHEROID['GRS_1980',6378137.0,298.257222101]],PRIMEM['Greenwich',0.0],UNIT['Degree',0.0174532925199433]],PROJECTION['Transverse_Mercator'],PARAMETER['False_Easting',500000.0],PARAMETER['False_Northing',0.0],PARAMETER['Central_Meridian',-3.0],PARAMETER['Scale_Factor',0.9996],PARAMETER['Latitude_Of_Origin',0.0],UNIT['Meter',1.0]]")

# Process: Select
arcpy.Select_analysis(LSIdeale_shp, LSIdLig_shp, "\"LENGTH_3D\" <= 2.99")

# Process: Select 
arcpy.Select_analysis(LSIdLig_shp, LSIdSel_shp, "\"VISIBLE\" = 1")

# Process: Summary Statistics
arcpy.Statistics_analysis(LSIdSel_shp, IdealStatistics_dbf, "OID_OBSERV COUNT", "OID_OBSERV")

# Process: Join Field
arcpy.JoinField_management(OPsId_shp, "FID", IdealStatistics_dbf, "OID_OBSERV", "COUNT_OID_")

# Process: Add Field
arcpy.AddField_management(OPsId_shp, "Frequency", "DOUBLE", 100, 10, 10, "", "NON_NULLABLE", "NON_REQUIRED")

## input file
file = OPsId_shp

field_to_max = 'COUNT_OID_' ### field with values
field_to_update = 'Frequency' ### Field to be updated

values = []
# Process: Max
with arcpy.da.SearchCursor(file, field_to_max) as cursor, arcpy.da.UpdateCursor(file, [field_to_max, field_to_update]) as upd_cursor:
    for row in cursor:
        values.append(row[0])
    max_num = max(values) ### get max value
    for row in upd_cursor:
        value = (float(row[0]) / float(max_num)) * 100

        row[1] = float(value) ### calculate value
        upd_cursor.updateRow(row) ### set value

# Process: Point to Raster
arcpy.PointToRaster_conversion(OPsId_shp, "Frequency", IdealPosition_tif, "MAXIMUM", "NONE", "0,25")

# Process: Summary Statistics 
arcpy.Statistics_analysis(LSIdSel_shp, IdealTarStatistics_dbf, "OID_TARGET COUNT", "OID_TARGET")

# Process: Join Field 
arcpy.JoinField_management("C:/Paleospeleology/Allin.shp", "FID", IdealTarStatistics_dbf, "OID_TARGET", "COUNT_OID_")

# Process: Add Field 
arcpy.AddField_management("C:/Paleospeleology/Allin.shp", "Ideal", "DOUBLE", 100, 10, 10, "", "NON_NULLABLE", "NON_REQUIRED")

## input file 
file2 = "C:/Paleospeleology/Allin.shp"

field_to_max2 = 'COUNT_OID1' ### field with values
field_to_update2 = 'Ideal' ### Field to be updated

values2 = []
with arcpy.da.SearchCursor(file2, [field_to_max2]) as cursor, arcpy.da.UpdateCursor(file2, [field_to_max2, field_to_update2]) as upd_cursor:
    for row in cursor:
        values2.append(row[0])
    max_num2 = max(values2) ### 
    for row in upd_cursor:
        value2 = (float(row[0]) / float(max_num2)) * 100

        row[1] = float(value2) ### calculate value
        upd_cursor.updateRow(row) ### set value

# Process: Point to Raster 
arcpy.PointToRaster_conversion("C:/Paleospeleology/Allin.shp", "Ideal", IdealHands_tif, "MAXIMUM", "NONE", "0,25")

### "EXITO HASTA AQUI 2024/07/06" (@ I. Intxaurbe) !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

#   for standard output
arcpy.env.workspace = "C:/Paleospeleology/Metadata"

# Process: Raster Calculator
XA_tif = SetNull("C:/Paleospeleology/Topography/Slope.tif", "C:/Paleospeleology/Topography/Height.tif", "VALUE >= 45")

# Process: Raster Calculator
XB_tif = SetNull(XA_tif, XA_tif, "VALUE < 0,24")

# Process: Raster Calculator 
XC_tif = Con(XB_tif, "1,86", XB_tif, "VALUE >= 1,86")

# Process: Raster Calculator 
XD_tif = Con(XC_tif, "11,607", XC_tif, "VALUE > 0")

# Process: Raster Calculator 
XE_tif = Con(XD_tif, "6,217", XD_tif, "VALUE > 0")

# Process: Raster Calculator 
XF_tif = (XE_tif*XC_tif)

# Process: Raster Calculator 
CostWalking = (XD_tif - XF_tif)
CostWalking.save(CostWalking_tif)

# Process: Raster Calculator 
XG_tif = SetNull("C:/Paleospeleology/Topography/Slope.tif", "C:/Paleospeleology/Topography/Slope.tif", "VALUE < 45")

# Process: Raster Calculator
XH_tif = Con(XG_tif, "-87,48216", XG_tif, "VALUE > 0")

# Process: Raster Calculator 
XI_tif = Con(XG_tif, "1,95901", XG_tif, "VALUE > 0")

# Process: Raster Calculator 
XJ_tif = (XI_tif*XG_tif)

# Process: Raster Calculator
CostClimbing = (XH_tif + XJ_tif)
CostClimbing.save(CostClimbing_tif)

# Process: Raster Calculator
DegreesToGradians = Con("C:/Paleospeleology/Topography/Slope.tif", "57,296", "C:/Paleospeleology/Topography/Slope.tif", "VALUE > 0")

# Process: Raster Calculator
SlopeInGradians = ("C:/Paleospeleology/Topography/Slope.tif" / DegreesToGradians)

# Process: Raster Calculator
ElevationGain = Tan(SlopeInGradians)

# Process: Raster Calculator
CostClimbingOK = (ElevationGain * CostClimbing)
CostClimbingOK.save(CostClimbingOK_tif)

# Process: Mosaic To New Raster
arcpy.MosaicToNewRaster_management("CostWalking.tif;CostClimbingOK.tif", "C:\\Paleospeleology\Metadata", \
                                   "CostOK.tif", "PROJCS['ETRS_1989_ETRS-TM30',GEOGCS['GCS_ETRS_1989',DATUM['D_ETRS_1989',SPHEROID['GRS_1980',6378137.0,298.257222101]],PRIMEM['Greenwich',0.0],UNIT['Degree',0.0174532925199433]],PROJECTION['Transverse_Mercator'],PARAMETER['False_Easting',500000.0],PARAMETER['False_Northing',0.0],PARAMETER['Central_Meridian',-3.0],PARAMETER['Scale_Factor',0.9996],PARAMETER['Latitude_Of_Origin',0.0],UNIT['Meter',1.0]]",\
                                   "32_BIT_FLOAT", "0,05", "1", "MAXIMUM","REJECT")

# Process: Raster Calculator
Cost = SetNull(CostOK_tif, CostOK_tif, "VALUE < 0")
Cost.save(Cost_tif)

# Execute CreateFolder
arcpy.CreateFolder_management("C:/Paleospeleology", "Depth")

#   for standard output
arcpy.env.workspace = "C:/Paleospeleology/Depth"

# Process: Cost Distance
CostDistance = CostDistance("C:/Paleospeleology/Access.shp", "C:/Paleospeleology/Metadata/Cost.tif", "", "CostBack.tif")
CostDistance.save(CostDistance_tif)

# Process: Cost Path
outCostPath = CostPath("C:/Paleospeleology/Depths.shp", "C:/Paleospeleology/Depth/CostDistance.tif", "CostBack.tif", "EACH_CELL")
outCostPath.save(MainCorridor_tif)

# Process: Raster to Polyline
arcpy.RasterToPolyline_conversion(MainCorridor_tif, MainCorridor_shp, "ZERO", "0", "SIMPLIFY", "Value")

# Process: Join Field
arcpy.JoinField_management(MainCorridor_shp, "GRID_CODE", MainCorridor_tif, "Value", "PATHCOST")

# Process: Add Surface Information
arcpy.ddd.AddSurfaceInformation(MainCorridor_shp, "C:/Paleospeleology/Topography/GroundOK.tif", "SURFACE_LENGTH")

# Process: Cost Path
outCostPath = CostPath("C:/Paleospeleology/Allin.shp", "C:/Paleospeleology/Depth/CostDistance.tif", "CostBack.tif", "EACH_CELL")
outCostPath.save(LCP_tif)

# Process: Raster to Polyline
arcpy.RasterToPolyline_conversion(LCP_tif, LCP_shp, "ZERO", "0", "SIMPLIFY", "Value")

# Process: Join Field
arcpy.JoinField_management(LCP_shp, "GRID_CODE", LCP_tif, "Value", "PATHCOST")

# Process: Add Surface Information
arcpy.ddd.AddSurfaceInformation(LCP_shp, "C:/Paleospeleology/Topography/GroundOK.tif", "SURFACE_LENGTH")

### EXITO 07/07/2024 (@ I. Intxaurbe) !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

# Execute CreateFolder
arcpy.CreateFolder_management("C:/Paleospeleology", "Dangerousness")

#   for standard output
arcpy.env.workspace = "C:/Paleospeleology/Dangerousness"

# Process: Raster To Point
arcpy.RasterToPoint_conversion("C:/Paleospeleology/Metadata/CostClimbingOK.tif", CostClimbing_shp, "VALUE")

# Process: Buffer analysis
arcpy.Buffer_analysis("C:/Paleospeleology/Allin.shp", Buffer2_shp, "1,5 Meters", "FULL", "ROUND", "NONE", "", "PLANAR")

# Process: Clip analysis
arcpy.Clip_analysis(CostClimbing_shp, Buffer2_shp, Dangerousness_shp)

# Process: Point to Raster
arcpy.PointToRaster_conversion(Dangerousness_shp, "grid_code", Dangerousness_tif, "MAXIMUM", "NONE", "0,05")

### EXITO 07/07/2024 (@ I. Intxaurbe) !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

# Process: Extract By Mask
outExtractByMask = ExtractByMask("C:/Paleospeleology/Metadata/CostOK.tif", "C:/Paleospeleology/Depth/LCP.shp")
outExtractByMask.save(CostLCP_tif)

# Process: Raster To Point
arcpy.RasterToPoint_conversion(CostLCP_tif, CostLCP_shp, "VALUE")

# Process: Kernel Density
arcpy.gp.KernelDensity_sa(CostLCP_shp, "grid_code", GreaterDifficulties_tif, "0,25", "2", "SQUARE_MAP_UNITS", "DENSITIES", "PLANAR")

# Execute CreateFolder
arcpy.CreateFolder_management("C:/Paleospeleology", "VisibilityMainPaths")

#   for standard output
arcpy.env.workspace = "C:/Paleospeleology/VisibilityMainPaths"

# Process: Buffer analysis
arcpy.Buffer_analysis("C:/Paleospeleology/Depth/MainCorridor.shp", Buffer3_shp, "2,99 Meters", "FULL", "ROUND", "NONE", "", "PLANAR")

# Process: Clip analysis
arcpy.Clip_analysis("C:/Paleospeleology/Position_Ideale/OPsId.shp", Buffer3_shp, VisibleMainCorridor_shp)

# Process: Construct Sight Lines
arcpy.ConstructSightLines_3d(VisibleMainCorridor_shp, "C:/Paleospeleology/Allin.shp", LSMainCor_shp, "grid_code", "Shape.Z", "<None>", "1", "NOT_OUTPUT_THE_DIRECTION")

# Process: Intervisibility
arcpy.Intervisibility_3d(LSMainCor_shp, "C:/Paleospeleology/Topography/CeilingsMax.shp", "VISIBLE")

# Process: Add Geometry
arcpy.AddGeometryAttributes_management(LSMainCor_shp, "LENGTH_3D", "METERS", "", "PROJCS['ETRS_1989_ETRS-TM30',GEOGCS['GCS_ETRS_1989',DATUM['D_ETRS_1989',SPHEROID['GRS_1980',6378137.0,298.257222101]],PRIMEM['Greenwich',0.0],UNIT['Degree',0.0174532925199433]],PROJECTION['Transverse_Mercator'],PARAMETER['False_Easting',500000.0],PARAMETER['False_Northing',0.0],PARAMETER['Central_Meridian',-3.0],PARAMETER['Scale_Factor',0.9996],PARAMETER['Latitude_Of_Origin',0.0],UNIT['Meter',1.0]]")

# Process: Select
arcpy.Select_analysis(LSMainCor_shp, LSMCLig_shp, "\"LENGTH_3D\" <= 2.99")

# Process: Select 
arcpy.Select_analysis(LSMCLig_shp, LSMCSel_shp, "\"VISIBLE\" = 1")

# Process: Summary Statistics
arcpy.Statistics_analysis(LSMCSel_shp, MCStatistics_dbf, "OID_OBSERV COUNT", "OID_OBSERV")

# Process: Join Field
arcpy.JoinField_management(VisibleMainCorridor_shp, "FID", MCStatistics_dbf, "OID_OBSERV", "COUNT_OID_")

# Process: Add Field
arcpy.AddField_management(VisibleMainCorridor_shp, "Frequen2", "DOUBLE", 100, 10, 10, "", "NON_NULLABLE", "NON_REQUIRED")

## input file
file = VisibleMainCorridor_shp

field_to_max = 'COUNT_OID_' ### field with values
field_to_update = 'Frequen2' ### Field to be updated

values = []
# Process: Max
with arcpy.da.SearchCursor(file, field_to_max) as cursor, arcpy.da.UpdateCursor(file, [field_to_max, field_to_update]) as upd_cursor:
    for row in cursor:
        values.append(row[0])
    max_num = max(values) ### get max value
    for row in upd_cursor:
        value = (float(row[0]) / float(max_num)) * 100

        row[1] = float(value) ### calculate value
        upd_cursor.updateRow(row) ### set value

# Process: Point to Raster
arcpy.PointToRaster_conversion(VisibleMainCorridor_shp, "Frequen2", VisibleMainCorridor_tif, "MAXIMUM", "NONE", "0,25")

# Process: Summary Statistics 
arcpy.Statistics_analysis(LSMCSel_shp, MCTarStatistics_dbf, "OID_TARGET COUNT", "OID_TARGET")

# Process: Join Field 
arcpy.JoinField_management("C:/Paleospeleology/Allin.shp", "FID", MCTarStatistics_dbf, "OID_TARGET", "COUNT_OID_")

# Process: Add Field 
arcpy.AddField_management("C:/Paleospeleology/Allin.shp", "MCVis", "DOUBLE", 100, 10, 10, "", "NON_NULLABLE", "NON_REQUIRED")

## input file 
file2 = "C:/Paleospeleology/Allin.shp"

field_to_max2 = 'COUNT_OI_1' ### field with values
field_to_update2 = 'MCVis' ### Field to be updated

values2 = []
with arcpy.da.SearchCursor(file2, [field_to_max2]) as cursor, arcpy.da.UpdateCursor(file2, [field_to_max2, field_to_update2]) as upd_cursor:
    for row in cursor:
        values2.append(row[0])
    max_num2 = max(values2) ### 
    for row in upd_cursor:
        value2 = (float(row[0]) / float(max_num2)) * 100

        row[1] = float(value2) ### calculate value
        upd_cursor.updateRow(row) ### set value

# Process: Point to Raster 
arcpy.PointToRaster_conversion("C:/Paleospeleology/Allin.shp", "MCVis", MCVisibHands_tif, "MAXIMUM", "NONE", "0,25")

# Process: Buffer analysis
arcpy.Buffer_analysis("C:/Paleospeleology/Depth/LCP.shp", Buffer4_shp, "2,99 Meters", "FULL", "ROUND", "NONE", "", "PLANAR")

# Process: Clip analysis
arcpy.Clip_analysis("C:/Paleospeleology/Position_Ideale/OPsId.shp", Buffer4_shp, VisibleLCP_shp)

# Process: Construct Sight Lines
arcpy.ConstructSightLines_3d(VisibleLCP_shp, "C:/Paleospeleology/Allin.shp", LSLCP_shp, "grid_code", "Shape.Z", "<None>", "1", "NOT_OUTPUT_THE_DIRECTION")

# Process: Intervisibility
arcpy.Intervisibility_3d(LSLCP_shp, "C:/Paleospeleology/Topography/CeilingsMax.shp", "VISIBLE")

# Process: Add Geometry
arcpy.AddGeometryAttributes_management(LSLCP_shp, "LENGTH_3D", "METERS", "", "PROJCS['ETRS_1989_ETRS-TM30',GEOGCS['GCS_ETRS_1989',DATUM['D_ETRS_1989',SPHEROID['GRS_1980',6378137.0,298.257222101]],PRIMEM['Greenwich',0.0],UNIT['Degree',0.0174532925199433]],PROJECTION['Transverse_Mercator'],PARAMETER['False_Easting',500000.0],PARAMETER['False_Northing',0.0],PARAMETER['Central_Meridian',-3.0],PARAMETER['Scale_Factor',0.9996],PARAMETER['Latitude_Of_Origin',0.0],UNIT['Meter',1.0]]")

# Process: Select
arcpy.Select_analysis(LSLCP_shp, LSLCPLig_shp, "\"LENGTH_3D\" <= 2.99")

# Process: Select 
arcpy.Select_analysis(LSLCPLig_shp, LSLCPSel_shp, "\"VISIBLE\" = 1")

# Process: Summary Statistics
arcpy.Statistics_analysis(LSLCPSel_shp, LCPStatistics_dbf, "OID_OBSERV COUNT", "OID_OBSERV")

# Process: Join Field
arcpy.JoinField_management(VisibleLCP_shp, "FID", LCPStatistics_dbf, "OID_OBSERV", "COUNT_OID_")

# Process: Add Field
arcpy.AddField_management(VisibleLCP_shp, "Frequen3", "DOUBLE", 100, 10, 10, "", "NON_NULLABLE", "NON_REQUIRED")

## input file
file = VisibleLCP_shp

field_to_max = 'COUNT_OID_' ### field with values
field_to_update = 'Frequen3' ### Field to be updated

values = []
# Process: Max
with arcpy.da.SearchCursor(file, field_to_max) as cursor, arcpy.da.UpdateCursor(file, [field_to_max, field_to_update]) as upd_cursor:
    for row in cursor:
        values.append(row[0])
    max_num = max(values) ### get max value
    for row in upd_cursor:
        value = (float(row[0]) / float(max_num)) * 100

        row[1] = float(value) ### calculate value
        upd_cursor.updateRow(row) ### set value

# Process: Point to Raster
arcpy.PointToRaster_conversion(VisibleLCP_shp, "Frequen3", VisibleLCP_tif, "MAXIMUM", "NONE", "0,25")

# Process: Summary Statistics 
arcpy.Statistics_analysis(LSLCPSel_shp, LCPStatistics_dbf, "OID_TARGET COUNT", "OID_TARGET")

# Process: Join Field 
arcpy.JoinField_management("C:/Paleospeleology/Allin.shp", "FID", LCPStatistics_dbf, "OID_TARGET", "COUNT_OID_")

# Process: Add Field 
arcpy.AddField_management("C:/Paleospeleology/Allin.shp", "LCPVis", "DOUBLE", 100, 10, 10, "", "NON_NULLABLE", "NON_REQUIRED")

## input file 
file2 = "C:/Paleospeleology/Allin.shp"

field_to_max2 = 'COUNT_OI_2' ### field with values
field_to_update2 = 'LCPVis' ### Field to be updated

values2 = []
with arcpy.da.SearchCursor(file2, [field_to_max2]) as cursor, arcpy.da.UpdateCursor(file2, [field_to_max2, field_to_update2]) as upd_cursor:
    for row in cursor:
        values2.append(row[0])
    max_num2 = max(values2) ### 
    for row in upd_cursor:
        value2 = (float(row[0]) / float(max_num2)) * 100

        row[1] = float(value2) ### calculate value
        upd_cursor.updateRow(row) ### set value

# Process: Point to Raster 
arcpy.PointToRaster_conversion("C:/Paleospeleology/Allin.shp", "LCPVis", LCPVisibHands_tif, "MAXIMUM", "NONE", "0,25")

# Execute CreateFolder
arcpy.CreateFolder_management("C:/Paleospeleology", "HeatMapDensity")

#   for standard output
arcpy.env.workspace = "C:/Paleospeleology/HeatMapDensity"

# Process: Kernel Density
arcpy.gp.KernelDensity_sa("C:/Paleospeleology/Allin.shp", "NONE", HeatMapDensity_tif, "0,05", "28,30", "SQUARE_METERS", "DENSITIES", "PLANAR")